{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\callo\\\\OneDrive\\\\Desktop\\\\PROFESSIONAL\\\\Devops_FullStack_Internship\\\\Online_learning\\\\week 3\\\\Javascript\\\\React-App-SmartBrain-FrontEnd-Project\\\\facerecognitionbrain\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Particles from 'react-particles-js'; //import Clarifai from 'clarifai';\n\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Register from './components/Register/Register';\nimport SignIn from './components/SignIn/SignIn';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank'; // const Clarifai = require('clarifai');\n// const app = new Clarifai.App({\n// apiKey: 'be52b48c98db41f8929d9dd47e10a291'\n// });\n//const app = new Clarifai.App({apiKey: 'be52b48c98db41f8929d9dd47e10a291'});\n\nconst particlesOptions = {\n  particles: {\n    value: 30,\n    density: {\n      enabled: true,\n      value_area: 800\n    }\n  }\n}; //to initialize the state for different users\n\nconst initialState = {\n  input: '',\n  imageUrl: '',\n  box: {},\n  route: 'signin',\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email: ' ',\n    entries: 0,\n    joined: ''\n  }\n};\n\nclass App extends Component {\n  //to get information from Detect button\n  constructor() {\n    super();\n\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          entries: data.entries,\n          joined: data.joined\n        }\n      });\n    };\n\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputImage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      console.log(width, height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n\n    this.displayFaceBox = box => {\n      console.log(box);\n      this.setState({\n        box: box\n      });\n    };\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      }); //to get value from input\n    };\n\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageurl: this.state.input\n      });\n      fetch('http://localhost:3000/imageurl', {\n        method: 'post',\n        //this is 'get' by default\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          input: this.state.input\n        })\n      }).then(response => response.json()) // app.models.predict(\n      // Clarifai.FACE_DETECT_MODEL, \n      // this.state.input)\n      .then(response => {\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            //this is 'get' by default\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            }));\n          }).catch(console.log); //for error handling\n        }\n\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      }) // do something with response\n      .catch(err => console.log(err)); // there was an error\n    };\n\n    this.onRouteChange = route => {\n      if (route === 'signout') {\n        this.setState(initialState);\n      } else if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n\n      this.setState({\n        route: route\n      }); //changes route to home when sign in and sign out\n    };\n\n    this.state = initialState;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Particles, {\n        className: \"particles\",\n        params: particlesOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n        isSignedIn: this.state.isSignedIn,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), this.state.route === 'home' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {\n          name: this.state.user.name,\n          entries: this.state.user.entries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onButtonSubmit: this.onButtonSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          box: this.state.box,\n          imageUrl: this.state.input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this) : this.state.route === 'signin' ? /*#__PURE__*/_jsxDEV(SignIn, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this) // a function to redirect when signed in\n      ]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/callo/OneDrive/Desktop/PROFESSIONAL/Devops_FullStack_Internship/Online_learning/week 3/Javascript/React-App-SmartBrain-FrontEnd-Project/facerecognitionbrain/src/App.js"],"names":["React","Component","Particles","FaceRecognition","Navigation","Register","SignIn","Logo","ImageLinkForm","Rank","particlesOptions","particles","value","density","enabled","value_area","initialState","input","imageUrl","box","route","isSignedIn","user","id","name","email","entries","joined","App","constructor","loadUser","data","setState","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","console","log","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","onInputChange","event","target","onButtonSubmit","imageurl","state","fetch","method","headers","body","JSON","stringify","then","response","json","count","Object","assign","catch","err","onRouteChange","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,oBAAtB,C,CACA;;AACA,OAAOC,eAAP,MAA4B,8CAA5B;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,IAAP,MAAiB,wBAAjB,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,gBAAgB,GAAG;AACjBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,KAAK,EAAC,EADG;AAETC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAC,IADD;AAEPC,MAAAA,UAAU,EAAE;AAFL;AAFA;AADM,CAAzB,C,CASA;;AACA,MAAMC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE,EADQ;AAEfC,EAAAA,QAAQ,EAAE,EAFK;AAGfC,EAAAA,GAAG,EAAE,EAHU;AAIfC,EAAAA,KAAK,EAAE,QAJQ;AAKfC,EAAAA,UAAU,EAAE,KALG;AAMfC,EAAAA,IAAI,EAAC;AACDC,IAAAA,EAAE,EAAE,EADH;AAEDC,IAAAA,IAAI,EAAC,EAFJ;AAGDC,IAAAA,KAAK,EAAE,GAHN;AAIDC,IAAAA,OAAO,EAAE,CAJR;AAKDC,IAAAA,MAAM,EAAE;AALP;AANU,CAArB;;AAgBA,MAAMC,GAAN,SAAkB3B,SAAlB,CAA4B;AAC1B;AACA4B,EAAAA,WAAW,GAAE;AACX;;AADW,SAKbC,QALa,GAKHC,IAAD,IAAS;AAChB,WAAKC,QAAL,CAAc;AAACV,QAAAA,IAAI,EAAC;AACdC,UAAAA,EAAE,EAAEQ,IAAI,CAACR,EADK;AAEdC,UAAAA,IAAI,EAAEO,IAAI,CAACP,IAFG;AAGdC,UAAAA,KAAK,EAAEM,IAAI,CAACN,KAHE;AAIdC,UAAAA,OAAO,EAAEK,IAAI,CAACL,OAJA;AAKdC,UAAAA,MAAM,EAAEI,IAAI,CAACJ;AALC;AAAN,OAAd;AAOD,KAbY;;AAAA,SAqBbM,qBArBa,GAqBWF,IAAD,IAAS;AAC9B,YAAMG,YAAY,GAAGH,IAAI,CAACI,OAAL,CAAa,CAAb,EAAgBJ,IAAhB,CAAqBK,OAArB,CAA6B,CAA7B,EAAgCC,WAAhC,CAA4CC,YAAjE;AACA,YAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAd;AACA,YAAMC,KAAK,GAAGC,MAAM,CAACJ,KAAK,CAACG,KAAP,CAApB;AACA,YAAME,MAAM,GAAGD,MAAM,CAACJ,KAAK,CAACK,MAAP,CAArB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAAmBE,MAAnB;AACA,aAAO;AACLG,QAAAA,OAAO,EAAEb,YAAY,CAACc,QAAb,GAAwBN,KAD5B;AAELO,QAAAA,MAAM,EAAEf,YAAY,CAACgB,OAAb,GAAuBN,MAF1B;AAGLO,QAAAA,QAAQ,EAAET,KAAK,GAAIR,YAAY,CAACkB,SAAb,GAAyBV,KAHvC;AAILW,QAAAA,SAAS,EAAET,MAAM,GAAIV,YAAY,CAACoB,UAAb,GAA0BV;AAJ1C,OAAP;AAMD,KAjCY;;AAAA,SAkCbW,cAlCa,GAkCGpC,GAAD,IAAQ;AACrB0B,MAAAA,OAAO,CAACC,GAAR,CAAY3B,GAAZ;AACA,WAAKa,QAAL,CAAc;AAACb,QAAAA,GAAG,EAAEA;AAAN,OAAd;AACD,KArCY;;AAAA,SAuCbqC,aAvCa,GAuCIC,KAAD,IAAU;AACxB,WAAKzB,QAAL,CAAc;AAACf,QAAAA,KAAK,EAAEwC,KAAK,CAACC,MAAN,CAAa9C;AAArB,OAAd,EADwB,CACoB;AAC7C,KAzCY;;AAAA,SA2Cb+C,cA3Ca,GA2CI,MAAK;AACpB,WAAK3B,QAAL,CAAc;AAAC4B,QAAAA,QAAQ,EAAC,KAAKC,KAAL,CAAW5C;AAArB,OAAd;AACE6C,MAAAA,KAAK,CAAC,gCAAD,EAAoC;AACrCC,QAAAA,MAAM,EAAE,MAD6B;AACrB;AAChBC,QAAAA,OAAO,EAAE;AAAC,0BAAgB;AAAjB,SAF4B;AAGrCC,QAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AACpBlD,UAAAA,KAAK,EAAE,KAAK4C,KAAL,CAAW5C;AADE,SAAf;AAHgC,OAApC,CAAL,CAMCmD,IAND,CAMMC,QAAQ,IAAGA,QAAQ,CAACC,IAAT,EANjB,EAQF;AACA;AACA;AAVE,OAWDF,IAXC,CAWIC,QAAQ,IAAI;AAChB,YAAIA,QAAJ,EAAc;AACZP,UAAAA,KAAK,CAAC,6BAAD,EAAiC;AACpCC,YAAAA,MAAM,EAAE,KAD4B;AACrB;AACfC,YAAAA,OAAO,EAAE;AAAC,8BAAgB;AAAjB,aAF2B;AAGpCC,YAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AACpB5C,cAAAA,EAAE,EAAE,KAAKsC,KAAL,CAAWvC,IAAX,CAAgBC;AADA,aAAf;AAH+B,WAAjC,CAAL,CAMC6C,IAND,CAMOC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANnB,EAOCF,IAPD,CAOMG,KAAK,IAAI;AACb,iBAAKvC,QAAL,CAAcwC,MAAM,CAACC,MAAP,CAAc,KAAKZ,KAAL,CAAWvC,IAAzB,EAA+B;AAACI,cAAAA,OAAO,EAAC6C;AAAT,aAA/B,CAAd;AACD,WATD,EAUCG,KAVD,CAUO7B,OAAO,CAACC,GAVf,EADY,CAWQ;AACrB;;AACH,aAAKS,cAAL,CAAoB,KAAKtB,qBAAL,CAA2BoC,QAA3B,CAApB;AAA0D,OAzBxD,EA0BH;AA1BG,OA2BHK,KA3BG,CA2BGC,GAAG,IAAG9B,OAAO,CAACC,GAAR,CAAY6B,GAAZ,CA3BT,EAFkB,CA6BU;AAC/B,KAzEY;;AAAA,SA2EbC,aA3Ea,GA2EIxD,KAAD,IAAU;AACxB,UAAGA,KAAK,KAAK,SAAb,EAAwB;AAAE,aAAKY,QAAL,CAAchB,YAAd;AAA4B,OAAtD,MACK,IAAGI,KAAK,KAAG,MAAX,EAAmB;AAAC,aAAKY,QAAL,CAAc;AAACX,UAAAA,UAAU,EAAC;AAAZ,SAAd;AAAiC;;AAC1D,WAAKW,QAAL,CAAc;AAACZ,QAAAA,KAAK,EAAEA;AAAR,OAAd,EAHwB,CAGO;AAChC,KA/EY;;AAEX,SAAKyC,KAAL,GAAY7C,YAAZ;AACD;;AA6EH6D,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACM,QAAC,SAAD;AAAW,QAAA,SAAS,EAAE,WAAtB;AACA,QAAA,MAAM,EAAInE;AADV;AAAA;AAAA;AAAA;AAAA,cADN,eAGI,QAAC,UAAD;AAAY,QAAA,UAAU,EAAG,KAAKmD,KAAL,CAAWxC,UAApC;AACA,QAAA,aAAa,EAAG,KAAKuD;AADrB;AAAA;AAAA;AAAA;AAAA,cAHJ,EAKK,KAAKf,KAAL,CAAWzC,KAAX,KAAoB,MAApB,gBACG;AAAA,gCACF,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,gBADE,eAEF,QAAC,IAAD;AAAM,UAAA,IAAI,EAAG,KAAKyC,KAAL,CAAWvC,IAAX,CAAgBE,IAA7B;AAAmC,UAAA,OAAO,EAAE,KAAKqC,KAAL,CAAWvC,IAAX,CAAgBI;AAA5D;AAAA;AAAA;AAAA;AAAA,gBAFE,eAGF,QAAC,aAAD;AACA,UAAA,aAAa,EAAE,KAAK8B,aADpB;AAEA,UAAA,cAAc,EAAE,KAAKG;AAFrB;AAAA;AAAA;AAAA;AAAA,gBAHE,eAMF,QAAC,eAAD;AAAiB,UAAA,GAAG,EAAG,KAAKE,KAAL,CAAW1C,GAAlC;AAAuC,UAAA,QAAQ,EAAE,KAAK0C,KAAL,CAAW5C;AAA5D;AAAA;AAAA;AAAA;AAAA,gBANE;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,GASI,KAAK4C,KAAL,CAAWzC,KAAX,KAAqB,QAArB,gBACD,QAAC,MAAD;AAAQ,QAAA,QAAQ,EAAE,KAAKU,QAAvB;AAAiC,QAAA,aAAa,EAAI,KAAK8C;AAAvD;AAAA;AAAA;AAAA;AAAA,cADC,gBAED,QAAC,QAAD;AAAU,QAAA,QAAQ,EAAG,KAAK9C,QAA1B;AAAoC,QAAA,aAAa,EAAI,KAAK8C;AAA1D;AAAA;AAAA;AAAA;AAAA,cAhBR,CAiBQ;AAjBR;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAsBC;;AAzGyB;;AA2G5B,eAAehD,GAAf","sourcesContent":["import React, {Component} from 'react';\nimport Particles from 'react-particles-js';\n//import Clarifai from 'clarifai';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Register from './components/Register/Register';\nimport SignIn from './components/SignIn/SignIn';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\n\n// const Clarifai = require('clarifai');\n// const app = new Clarifai.App({\n// apiKey: 'be52b48c98db41f8929d9dd47e10a291'\n// });\n//const app = new Clarifai.App({apiKey: 'be52b48c98db41f8929d9dd47e10a291'});\n\nconst particlesOptions = {\n        particles: {\n          value:30,\n          density: {\n            enabled:true,\n            value_area: 800\n          }\n              }\n            }\n//to initialize the state for different users\nconst initialState = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'signin',\n      isSignedIn: false,\n      user:{\n          id: '',\n          name:'',\n          email: ' ',\n          entries: 0,\n          joined: ''\n      }\n    }\n\n\nclass App extends Component {\n  //to get information from Detect button\n  constructor(){\n    super();\n    this.state= initialState;\n  }\n\n  loadUser=(data)=> {\n    this.setState({user:{\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          entries: data.entries,\n          joined: data.joined\n      }})\n  }\n\n  /*componentDidMount() { //for testing the connection between frontend and backend\n    fetch('http://localhost:3000')\n    .then(response => response.json())\n    .then(console.log) \n} */\n\n  calculateFaceLocation= (data)=> {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputImage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    console.log(width, height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n  displayFaceBox=(box)=> {\n    console.log(box);\n    this.setState({box: box});\n  }\n\n  onInputChange = (event)=> {\n    this.setState({input: event.target.value}); //to get value from input\n  }\n\n  onButtonSubmit = ()=> {\n    this.setState({imageurl:this.state.input})\n      fetch('http://localhost:3000/imageurl' , {\n          method: 'post', //this is 'get' by default\n          headers: {'Content-Type': 'application/json'},\n          body:JSON.stringify({\n          input: this.state.input\n        }) } )\n      .then(response=> response.json())\n\n    // app.models.predict(\n    // Clarifai.FACE_DETECT_MODEL, \n    // this.state.input)\n    .then(response => {\n      if (response) {\n        fetch('http://localhost:3000/image' , {\n          method: 'put', //this is 'get' by default\n          headers: {'Content-Type': 'application/json'},\n          body:JSON.stringify({\n          id: this.state.user.id\n        }) } )\n        .then (response => response.json())\n        .then(count => {\n          this.setState(Object.assign(this.state.user, {entries:count}))\n        })\n        .catch(console.log) //for error handling\n      }\n    this.displayFaceBox(this.calculateFaceLocation(response))}) \n   // do something with response\n  .catch(err=> console.log(err)); // there was an error\n  }\n\n  onRouteChange = (route)=> {\n    if(route === 'signout') { this.setState(initialState)}\n    else if(route==='home') {this.setState({isSignedIn:true})}\n    this.setState({route: route}); //changes route to home when sign in and sign out\n  }\nrender() {\n  return (\n    <div className=\"App\">\n          <Particles className= 'particles' \n          params = {particlesOptions}/>\n        <Navigation isSignedIn= {this.state.isSignedIn} \n        onRouteChange= {this.onRouteChange}  />\n        {this.state.route=== 'home'\n          ? <div>\n          <Logo/> \n          <Rank name= {this.state.user.name} entries={this.state.user.entries}/>\n          <ImageLinkForm \n          onInputChange={this.onInputChange} \n          onButtonSubmit={this.onButtonSubmit}/>\n          <FaceRecognition box ={this.state.box} imageUrl={this.state.input} />\n          </div>\n          : (this.state.route === 'signin' \n          ? <SignIn loadUser={this.loadUser} onRouteChange = {this.onRouteChange}/>\n          : <Register loadUser= {this.loadUser} onRouteChange = {this.onRouteChange}/>\n          ) // a function to redirect when signed in\n        }\n    </div>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}